datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                    Int                @id @default(autoincrement())
  email                 String             @unique
  password              String
  fullName              String?
  dateOfBirth           DateTime?
  emailConfirmed        Boolean            @default(false)
  verificationToken     String?
  verificationExpires   DateTime?
  resetToken            String?
  resetTokenExpires     DateTime?
  affiliateOwner        Boolean            @default(false)
  pricingPlan           String?            @default("premium")
  createdAt             DateTime           @default(now())
  records               Record[]
  trainings             Training[]
  monthlyGoal           Int?
  isAcceptedTerms       Boolean            @default(false)
  phone                 String?
  address               String?
  logo                  String?
  emergencyContact      String?
  classSchedules        ClassSchedule[]
  Plan                  Plan[]
  Affiliate             Affiliate[]
  AffiliateTrainer      AffiliateTrainer[]
  classAttendances      ClassAttendee[]
  credit                Credit[]
  UserPlan              UserPlan[]
  homeAffiliate         Int?
  classLeaderboard      ClassLeaderboard[]
  members               Members[]
  transactions          transactions[]
  waitlist              Waitlist[]
  userNotes             UserNote[]
  messageGroups         UserMessageGroup[]
  contract              Contract[]
  signedContracts       SignedContract[]
  paymentHolidays       PaymentHoliday[]
  contractLogs          ContractLogs[]
  createdTrainingPlans  TrainingPlan[]     @relation("CreatedPlans")
  assignedTrainingPlans TrainingPlan[]     @relation("AssignedPlans")
  sectorComments        SectorComment[]
  contactNotes          ContactNote[]
  familyMembers         FamilyMember[]
}

model FamilyMember {
  id               Int             @id @default(autoincrement())
  userId           Int
  user             User            @relation(fields: [userId], references: [id])
  fullName         String
  createdAt        DateTime        @default(now())
  classAttendances ClassAttendee[]
  userplans        UserPlan[]
}

model Message {
  id            Int       @id @default(autoincrement())
  affiliateId   Int
  recipientId   Int? // Kui teade saadetakse konkreetsele kasutajale (User.id), muidu v천ib j채채da t체hjaks
  subject       String
  recipientType String
  body          String
  createdAt     DateTime  @default(now())
  affiliate     Affiliate @relation(fields: [affiliateId], references: [id])
}

model Contract {
  id                 Int              @id @default(autoincrement())
  affiliateId        Int
  userId             Int
  trainingType       String?
  contractType       String?
  content            String
  paymentType        String?
  paymentAmount      Float?
  paymentInterval    String?
  paymentDay         Int?
  isFirstPayment     Boolean          @default(true)
  firstPaymentAmount Float?
  validUntil         DateTime?
  startDate          DateTime?
  active             Boolean          @default(true)
  status             String           @default("draft") // draft, sent, accepted jne
  createdAt          DateTime         @default(now())
  acceptedAt         DateTime?
  affiliate          Affiliate        @relation(fields: [affiliateId], references: [id])
  user               User             @relation(fields: [userId], references: [id])
  signed             SignedContract[]
  logs               ContractLogs[]
  paymentHolidays    PaymentHoliday[]
  userPlan           UserPlan[]
}

model ContractLogs {
  id          Int       @id @default(autoincrement())
  contractId  Int
  userId      Int
  affiliateId Int
  action      String
  createdAt   DateTime  @default(now())
  contract    Contract  @relation(fields: [contractId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
}

model SignedContract {
  id              Int    @id @default(autoincrement())
  contractId      Int
  userId          Int
  affiliateId     Int
  acceptType      String
  contractTermsId Int

  signedAt      DateTime      @default(now())
  contract      Contract      @relation(fields: [contractId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  affiliate     Affiliate     @relation(fields: [affiliateId], references: [id])
  contractTerms ContractTerms @relation(fields: [contractTermsId], references: [id])
}

model ContractTemplate {
  id          String    @id @default(uuid())
  affiliateId Int
  content     String
  createdAt   DateTime  @default(now())
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
}

model ContractTerms {
  id        Int      @id @default(autoincrement())
  type      String
  terms     String
  createdAt DateTime @default(now())

  signedContracts SignedContract[]
}

model MessageGroup {
  id Int @id @default(autoincrement())

  groupName   String
  affiliateId Int
  affiliate   Affiliate          @relation(fields: [affiliateId], references: [id])
  createdAt   DateTime           @default(now())
  messages    UserMessageGroup[]
}

model UserMessageGroup {
  id      Int          @id @default(autoincrement())
  userId  Int
  groupId Int
  user    User         @relation(fields: [userId], references: [id])
  group   MessageGroup @relation(fields: [groupId], references: [id])
}

model UserNote {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  note      String
  flag      String
  createdAt DateTime @default(now())
}

model Credit {
  id           Int            @id @default(autoincrement())
  userId       Int
  credit       Float          @default(0.0)
  affiliateId  Int
  affiliate    Affiliate      @relation(fields: [affiliateId], references: [id])
  user         User           @relation(fields: [userId], references: [id])
  transactions transactions[]

  @@unique([userId, affiliateId])
}

model Training {
  id        Int        @id @default(autoincrement())
  type      String
  wodName   String?
  wodType   String? // For Time, EMOM, Tabata, AMRAP
  date      DateTime?
  score     String?
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  exercises Exercise[]
}

model Exercise {
  id           Int      @id @default(autoincrement())
  exerciseData String?
  trainingId   Int
  training     Training @relation(fields: [trainingId], references: [id])
}

model Record {
  id      Int       @id @default(autoincrement())
  type    String?
  name    String?
  date    DateTime?
  score   String?
  weight  Float?
  time    String?
  comment String?
  userId  Int
  user    User      @relation(fields: [userId], references: [id])
}

model defaultWOD {
  id          Int    @id @default(autoincrement())
  name        String @unique
  type        String
  description String
}

model ClassSchedule {
  id             Int                @id @default(autoincrement())
  trainingType   String?
  trainingName   String
  time           DateTime
  duration       Int
  trainer        String?
  memberCapacity Int
  location       String?
  repeatWeekly   Boolean            @default(false)
  ownerId        Int
  owner          User               @relation(fields: [ownerId], references: [id])
  affiliateId    Int
  affiliate      Affiliate          @relation(fields: [affiliateId], references: [id])
  seriesId       Int?
  wodName        String?
  wodType        String?
  description    String?
  canRegister    Boolean            @default(true)
  freeClass      Boolean            @default(false)
  attendees      ClassAttendee[]
  leaderboard    ClassLeaderboard[]
  waitlist       Waitlist[]
}

model Plan {
  id             Int            @id @default(autoincrement())
  name           String
  trainingType   String?
  validityDays   Int
  price          Float
  additionalData String?
  sessions       Int
  affiliateId    Int
  affiliate      Affiliate      @relation(fields: [affiliateId], references: [id])
  active         Boolean        @default(true)
  ownerId        Int
  owner          User           @relation(fields: [ownerId], references: [id])
  transactions   transactions[]
}

model UserPlan {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  contractId     Int?
  contract       Contract?     @relation(fields: [contractId], references: [id])
  affiliateId    Int
  planId         Int // kui tahad viidata Plan.id-le
  trainingType   String?
  paymentHoliday Boolean?      @default(false)
  planName       String
  validityDays   Int
  price          Float
  purchasedAt    DateTime      @default(now())
  endDate        DateTime
  sessionsLeft   Int
  familyMemberId Int?
  familyMember   FamilyMember? @relation(fields: [familyMemberId], references: [id])
  waitlist       Waitlist[]
}

model Affiliate {
  id                Int                @id @default(autoincrement())
  name              String
  address           String
  trainingType      String
  email             String?
  phone             String?
  iban              String?
  bankName          String?
  ownerId           Int
  feedback          String?
  website           String?
  logo              String?
  paymentHolidayFee Float?
  subdomain         String?            @unique
  owner             User               @relation(fields: [ownerId], references: [id])
  trainers          AffiliateTrainer[]
  ClassSchedule     ClassSchedule[]
  members           Members[]
  todayWOD          todayWOD[]
  transactions      transactions[]
  credit            Credit[]
  paymentHoliday    PaymentHoliday[]
  message           Message[]
  messageGroups     MessageGroup[]
  contract          Contract[]
  classAttendee     ClassAttendee[]
  contractTemplates ContractTemplate[]
  signedContracts   SignedContract[]
  contractLogs      ContractLogs[]
  plans             Plan[]
  affiliateApiKeys  AffiliateApiKeys[]
  contactNotes      ContactNote[]
}

model AffiliateApiKeys {
  id          Int       @id @default(autoincrement())
  affiliateId Int
  accessKey   String
  secretKey   String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
}

model AffiliateTrainer {
  id          Int       @id @default(autoincrement())
  affiliateId Int
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  trainerId   Int
  trainer     User      @relation(fields: [trainerId], references: [id])

  // Optional: @@unique([affiliateId, trainerId]) to prevent duplicates
  @@unique([affiliateId, trainerId])
}

model ClassAttendee {
  id             Int           @id @default(autoincrement())
  classId        Int
  classSchedule  ClassSchedule @relation(fields: [classId], references: [id])
  userId         Int
  user           User          @relation(fields: [userId], references: [id])
  userPlanId     Int
  createdAt      DateTime      @default(now())
  checkIn        Boolean       @default(false)
  affiliateId    Int
  affiliate      Affiliate     @relation(fields: [affiliateId], references: [id])
  isFamilyMember Boolean       @default(false)
  familyMemberId Int?
  familyMember   FamilyMember? @relation(fields: [familyMemberId], references: [id])

  @@unique([classId, userId]) // v채ltimaks duplikaatregistratsioone
}

model ClassLeaderboard {
  id            Int           @id @default(autoincrement())
  classId       Int
  classSchedule ClassSchedule @relation(fields: [classId], references: [id])
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  scoreType     String
  score         String
  createdAt     DateTime      @default(now())
}

model Members {
  id            Int            @id @default(autoincrement())
  affiliateId   Int
  userId        Int
  visitCount    Int?           @default(0)
  addScoreCount Int?           @default(0)
  atRisk        Boolean        @default(false)
  ristData      String?
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  user          User           @relation(fields: [userId], references: [id])
  affiliate     Affiliate      @relation(fields: [affiliateId], references: [id])
  transactions  transactions[]

  // iga liige v천ib kuuluda ainult 체hte affiliate'i
  @@unique([userId, affiliateId])
}

model todayWOD {
  id          Int       @id @default(autoincrement())
  wodName     String?
  type        String
  description String
  date        DateTime
  notes       String?
  affiliateId Int
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
}

model transactions {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  amount        Float
  invoiceNumber String
  description   String
  createdAt     DateTime @default(now())
  status        String?
  type          String?
  affiliateId   Int
  planId        Int?
  creditId      Int?
  contractId    Int?

  isCredit  Boolean?  @default(false)
  decrease  Boolean   @default(true)
  plan      Plan?     @relation(fields: [planId], references: [id])
  affiliate Affiliate @relation(fields: [affiliateId], references: [id])
  memberId  Int?
  member    Members?  @relation(fields: [memberId], references: [id])
  credit    Credit?   @relation(fields: [creditId], references: [id])
}

model PaymentHoliday {
  id          Int       @id @default(autoincrement())
  contractId  Int
  contract    Contract  @relation(fields: [contractId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  affiliateId Int
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])

  month      String
  reason     String?
  monthlyFee Float    @default(0.0)
  accepted   String   @default("pending") // pending, accepted, declined
  createdAt  DateTime @default(now())
}

model paymentMetadata {
  id               Int      @id @default(autoincrement())
  transactionId    Int
  montonioUuid     String
  contractId       Int
  affiliateId      Int
  paymentUrl       String?
  isPaymentHoliday Boolean  @default(false)
  createdAt        DateTime @default(now())

  @@unique([montonioUuid, contractId])
}

model Waitlist {
  id            Int           @id @default(autoincrement())
  classId       Int
  classSchedule ClassSchedule @relation(fields: [classId], references: [id])
  userId        Int
  userPlanId    Int
  userPlan      UserPlan      @relation(fields: [userPlanId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  createdAt     DateTime      @default(now())

  @@unique([classId, userId]) // v채ltimaks duplikaatregistratsioone
}

model TrainingPlan {
  id   Int    @id @default(autoincrement())
  name String

  creatorId    Int // User who created the plan
  userId       Int // User for whom the plan was created
  createdAt    DateTime      @default(now())
  trainingDays TrainingDay[]
  creator      User          @relation("CreatedPlans", fields: [creatorId], references: [id])
  user         User          @relation("AssignedPlans", fields: [userId], references: [id])
}

model TrainingDay {
  id             Int              @id @default(autoincrement())
  name           String // e.g., "Day 1"
  trainingPlanId Int
  trainingPlan   TrainingPlan     @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  sectors        TrainingSector[]
  comments       SectorComment[]
}

model TrainingSector {
  id            Int                 @id @default(autoincrement())
  type          String // "Strength", "WOD", "Essentials"
  content       String // The text content for the sector
  completed     Boolean             @default(false)
  trainingDayId Int
  trainingDay   TrainingDay         @relation(fields: [trainingDayId], references: [id], onDelete: Cascade)
  youtubeLinks  SectorYoutubeLink[]
}

model SectorYoutubeLink {
  id               Int            @id @default(autoincrement())
  url              String
  trainingSectorId Int
  trainingSector   TrainingSector @relation(fields: [trainingSectorId], references: [id], onDelete: Cascade)
}

model SectorComment {
  id            Int         @id @default(autoincrement())
  content       String
  trainingDayId Int
  trainingDay   TrainingDay @relation(fields: [trainingDayId], references: [id], onDelete: Cascade)
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  createdAt     DateTime    @default(now())
}

model ContactNote {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  affiliateId Int
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  note        String
  createdAt   DateTime  @default(now())
}
